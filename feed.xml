<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator><link href="https://genicsblog.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://genicsblog.com/" rel="alternate" type="text/html" /><updated>2021-12-25T17:55:44+00:00</updated><id>https://genicsblog.com/feed.xml</id><title type="html">Your awesome title</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><entry><title type="html">Welcome to Jekyll!</title><link href="https://genicsblog.com/welcome-to-jekyll" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2021-11-25T00:00:00+00:00</published><updated>2021-11-25T00:00:00+00:00</updated><id>https://genicsblog.com/welcome-to-jekyll</id><content type="html" xml:base="https://genicsblog.com/welcome-to-jekyll">&lt;h1 id=&quot;quotesapp&quot;&gt;QuotesApp&lt;/h1&gt;

&lt;p&gt;&lt;img alt=&quot;QuotesApp Logo&quot; src=&quot;https://raw.githubusercontent.com/GouravKhunger/QuotesApp/main/images/logo.png&quot; height=&quot;150px&quot; width=&quot;150px&quot; align=&quot;right&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A beautiful Quotes App where you can read and save quotes.&lt;/p&gt;

&lt;p&gt;This repository contains source code of a Quotes app, which helps you stay motivated by providing best picked quotes
stated by famous personalities. This app uses &lt;a href=&quot;https://zenquotes.io&quot;&gt;zen quotes&lt;/a&gt; api, for retrieving quotes :sweat: :innocent:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/GouravKhunger/QuotesApp/releases/latest&quot;&gt;Download&lt;/a&gt; the latest &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apk&lt;/code&gt; file of this project and do provide feedback.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Syntax&lt;/th&gt;
      &lt;th&gt;Description&lt;/th&gt;
      &lt;th&gt;Syntax&lt;/th&gt;
      &lt;th&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Header&lt;/td&gt;
      &lt;td&gt;Title&lt;/td&gt;
      &lt;td&gt;Header&lt;/td&gt;
      &lt;td&gt;Title&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Paragraph&lt;/td&gt;
      &lt;td&gt;Text&lt;/td&gt;
      &lt;td&gt;Syntax&lt;/td&gt;
      &lt;td&gt;Description&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Paragraph&lt;/td&gt;
      &lt;td&gt;Text&lt;/td&gt;
      &lt;td&gt;Paragraph&lt;/td&gt;
      &lt;td&gt;Text&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;Hi&lt;/p&gt;

&lt;h2 id=&quot;sub-heading&quot;&gt;Sub-heading&lt;/h2&gt;

&lt;p&gt;ok&lt;/p&gt;

&lt;h3 id=&quot;even-bigger-sub-heading&quot;&gt;Even bigger sub heading&lt;/h3&gt;

&lt;p&gt;omk&lt;/p&gt;

&lt;h4 id=&quot;i-see&quot;&gt;I see&lt;/h4&gt;

&lt;p&gt;lol&lt;/p&gt;

&lt;h5 id=&quot;nice&quot;&gt;Nice&lt;/h5&gt;

&lt;p&gt;yeah!&lt;/p&gt;

&lt;h5 id=&quot;final&quot;&gt;final&lt;/h5&gt;

&lt;p&gt;The final one :)&lt;/p&gt;

&lt;p&gt;You’ll find this post in your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;Jekyll requires blog post files to be named according to the following format:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;YEAR-MONTH-DAY-title.MARKUP&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Where &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;YEAR&lt;/code&gt; is a four-digit number, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MONTH&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DAY&lt;/code&gt; are both two-digit numbers, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MARKUP&lt;/code&gt; is the file extension representing the format used in the file. After that, include the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;HelloWorld&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]){&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello World this is long text to test the top right button ok tested maybe it should work i see idk fjskdjf sjdfkjs;klsj dfas fjdskl fjsal df&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;</content><author><name>gouravkhunger</name></author><category term="android" /><category term="quotes app" /><summary type="html">A demo post that comes along with the start template jjdsaklfjsadkl ksdjf kasdjf sdaklfj sdlkfj salkfj adklfj sdlkfj saldfk.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://images.unsplash.com/photo-1638232504909-8c35d24ae469?&amp;w=1740&amp;q=80" /><media:content medium="image" url="https://images.unsplash.com/photo-1638232504909-8c35d24ae469?&amp;w=1740&amp;q=80" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Android Application Fundamentals - Understand the bits and bytes</title><link href="https://genicsblog.com/android-application-fundamentals" rel="alternate" type="text/html" title="Android Application Fundamentals - Understand the bits and bytes" /><published>2021-09-22T00:00:00+00:00</published><updated>2021-09-22T00:00:00+00:00</updated><id>https://genicsblog.com/android-application-fundamentals</id><content type="html" xml:base="https://genicsblog.com/android-application-fundamentals">&lt;h2 id=&quot;android-application-fundamentals---understand-the-bits-and-bytes&quot;&gt;Android Application Fundamentals - Understand the bits and bytes&lt;/h2&gt;

&lt;p&gt;Hello there!&lt;/p&gt;

&lt;p&gt;In the last article at the &lt;a href=&quot;https://genicsblog.com/series/android-development&quot;&gt;Android app development series&lt;/a&gt;, we learned &lt;a href=&quot;https://genicsblog.com/how-to-create-your-first-android-app-using-android-studio&quot;&gt;how to make a Hello World app&lt;/a&gt;. We made a new project in Android Studio and ran the app.&lt;/p&gt;

&lt;p&gt;Now, in this article, we are going to learn more about the Android App structure, its basic components, how to use &lt;a href=&quot;https://developer.android.com/studio&quot;&gt;Android Studio&lt;/a&gt;, how to navigate through the project, and a lot many things that will be helpful along the way!&lt;/p&gt;

&lt;p&gt;Let’s dig into it!&lt;/p&gt;

&lt;h2 id=&quot;know-android-studio-in-depth&quot;&gt;Know Android Studio in depth&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://genicsblog.com/how-to-create-your-first-android-app-using-android-studio&quot;&gt;Last time&lt;/a&gt;, after we created a new app, this kind of screen popped up after the app was built.&lt;/p&gt;

&lt;noscript&gt;&lt;img src=&quot;https://source.unsplash.com/random/300x200?sig=1&quot; alt=&quot;Android Studio main window&quot; title=&quot;&quot; class=&quot;mx-auto&quot; /&gt;&lt;/noscript&gt;
&lt;p&gt;&lt;img data-src=&quot;https://source.unsplash.com/random/300x200?sig=1&quot; alt=&quot;Android Studio main window&quot; title=&quot;Android Studio main window&quot; class=&quot;mx-auto lazyload&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We’ll go through the window pane-by-pane. On the left side of the IDE window, you can see the project files in different views. By default, the project opens in the “Android” view, whereby you can see all the files that are relevant for your final app.&lt;/p&gt;

&lt;noscript&gt;&lt;img src=&quot;https://source.unsplash.com/random/300x200?sig=2&quot; alt=&quot;Android Studio main window&quot; title=&quot;&quot; class=&quot;mx-auto&quot; /&gt;&lt;/noscript&gt;
&lt;p&gt;&lt;img data-src=&quot;https://source.unsplash.com/random/300x200?sig=2&quot; alt=&quot;Android Studio main window&quot; title=&quot;Android Studio main window&quot; class=&quot;mx-auto lazyload&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There are many other default files that (most of the time) aren’t needed to mess with, so Android Studio provides a really handy way to keep aside the mess and focus on what files you need for the project.&lt;/p&gt;

&lt;p&gt;These are the different views you can use to show/hide relevant files.&lt;/p&gt;

&lt;noscript&gt;&lt;img src=&quot;https://source.unsplash.com/random/300x200?sig=3&quot; alt=&quot;Android Studio main window&quot; title=&quot;&quot; class=&quot;mx-auto&quot; /&gt;&lt;/noscript&gt;
&lt;p&gt;&lt;img data-src=&quot;https://source.unsplash.com/random/300x200?sig=3&quot; alt=&quot;Android Studio main window&quot; title=&quot;Android Studio main window&quot; class=&quot;mx-auto lazyload&quot; /&gt;&lt;/p&gt;

&lt;p&gt;But, most of the time, you would only need either the “Android” view or the “Project” view.&lt;/p&gt;

&lt;noscript&gt;&lt;img src=&quot;https://source.unsplash.com/random/300x200?sig=4&quot; alt=&quot;Android Studio main window&quot; title=&quot;&quot; class=&quot;mx-auto&quot; /&gt;&lt;/noscript&gt;
&lt;p&gt;&lt;img data-src=&quot;https://source.unsplash.com/random/300x200?sig=4&quot; alt=&quot;Android Studio main window&quot; title=&quot;Android Studio main window&quot; class=&quot;mx-auto lazyload&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Android View&lt;/strong&gt;: This view shows only relevant files related to your app screens and layout/resources.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Project View&lt;/strong&gt;: This view shows all the files in the current project. You might need this while adding external files to a specific location in the project. Example: Adding &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;google-services.json&lt;/code&gt; file to integrate Firebase in an Android app.&lt;/p&gt;

&lt;p&gt;Let’s get back to the main window, where you can write code.&lt;/p&gt;

&lt;noscript&gt;&lt;img src=&quot;https://source.unsplash.com/random/300x200?sig=5&quot; alt=&quot;Android Studio main window&quot; title=&quot;&quot; class=&quot;mx-auto&quot; /&gt;&lt;/noscript&gt;
&lt;p&gt;&lt;img data-src=&quot;https://source.unsplash.com/random/300x200?sig=5&quot; alt=&quot;Android Studio main window&quot; title=&quot;Android Studio main window&quot; class=&quot;mx-auto lazyload&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can double-click on any file on the left pane, and it will open in the editor. The image above is of is an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;XML&lt;/code&gt; file. Each &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;XML&lt;/code&gt; file has three different views, &lt;strong&gt;Code&lt;/strong&gt;, &lt;strong&gt;Split&lt;/strong&gt; and &lt;strong&gt;Design&lt;/strong&gt; view.&lt;/p&gt;

&lt;noscript&gt;&lt;img src=&quot;https://source.unsplash.com/random/300x200?sig=6&quot; alt=&quot;Android Studio main window&quot; title=&quot;&quot; class=&quot;mx-auto&quot; /&gt;&lt;/noscript&gt;
&lt;p&gt;&lt;img data-src=&quot;https://source.unsplash.com/random/300x200?sig=6&quot; alt=&quot;Android Studio main window&quot; title=&quot;Android Studio main window&quot; class=&quot;mx-auto lazyload&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can see just the code in the &lt;strong&gt;Code&lt;/strong&gt; view, see code as well as and live updates in the &lt;strong&gt;Split&lt;/strong&gt; view, or access the drag and drop layout builder in the &lt;strong&gt;Design&lt;/strong&gt; view.&lt;/p&gt;

&lt;p&gt;On the top bar, you would be able to see the various standard features any IDE would have. You can try going through all the options and find various things you might need.&lt;/p&gt;

&lt;noscript&gt;&lt;img src=&quot;https://source.unsplash.com/random/300x200?sig=7&quot; alt=&quot;Android Studio main window&quot; title=&quot;&quot; class=&quot;mx-auto&quot; /&gt;&lt;/noscript&gt;
&lt;p&gt;&lt;img data-src=&quot;https://source.unsplash.com/random/300x200?sig=7&quot; alt=&quot;Android Studio main window&quot; title=&quot;Android Studio main window&quot; class=&quot;mx-auto lazyload&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And just below the bar, there are various useful things. On the left side you can see the current file you are working on, and the path it has inside the project.&lt;/p&gt;

&lt;noscript&gt;&lt;img src=&quot;https://source.unsplash.com/random/300x200?sig=1&quot; alt=&quot;Android Studio main window&quot; title=&quot;&quot; class=&quot;mx-auto&quot; /&gt;&lt;/noscript&gt;
&lt;p&gt;&lt;img data-src=&quot;https://source.unsplash.com/random/300x200?sig=1&quot; alt=&quot;Android Studio main window&quot; title=&quot;Android Studio main window&quot; class=&quot;mx-auto lazyload&quot; /&gt;&lt;/p&gt;

&lt;p&gt;On the right side, you can see various buttons, which I will explain one by one:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The &lt;strong&gt;build&lt;/strong&gt;(green hammer)  is used to build your project.&lt;/li&gt;
  &lt;li&gt;the &lt;strong&gt;run button&lt;/strong&gt;(green triangle) is used to build your project while installing the built &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;APK&lt;/code&gt; on your connected Android device. You can select the device to launch your app from the drop-down beside your project.
  &lt;br /&gt;&lt;br /&gt;
    &lt;ul&gt;
      &lt;li&gt;When the app is running on a device, the two buttons beside the run button become active. They are for reloading the app once you made changes. 
  &lt;br /&gt;
  &lt;br /&gt;
  This is useful because it takes less time to build as it only considers the changes in code and builds them, which results in a significant reduction in build time.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Then there is the &lt;strong&gt;debug&lt;/strong&gt; button. In addition to what the run button does, it attaches a debugger to the app which logs what happens to your android device when the app is running. It is pretty helpful to debug errors and crashes.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Then there is the &lt;strong&gt;profiler&lt;/strong&gt; tool which allows you to scan how your app is using CPU, memory, network, battery, and other resources on the device where it is running.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;There are other buttons related to project structure, Gradle, AVD(Android Virtual Device) manager, and others. You can try them out. I have explained most of the tools you would need.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On the bottom, you would be able to see this:&lt;/p&gt;

&lt;noscript&gt;&lt;img src=&quot;https://source.unsplash.com/random/300x200?sig=10&quot; alt=&quot;Android Studio main window&quot; title=&quot;&quot; class=&quot;mx-auto&quot; /&gt;&lt;/noscript&gt;
&lt;p&gt;&lt;img data-src=&quot;https://source.unsplash.com/random/300x200?sig=10&quot; alt=&quot;Android Studio main window&quot; title=&quot;Android Studio main window&quot; class=&quot;mx-auto lazyload&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The specific tabs open up to show different things. Like, the debug tab opens up when you press the debug button, Profiler opens when you press profile, Logcat can be used to find logs of the running app, TODO lists all the TODOs (reminder to yourself) you have set anywhere in the project, etc.&lt;/p&gt;

&lt;p&gt;These were the basic things you would need to know to get started with Android Studio 🥳&lt;/p&gt;

&lt;p&gt;Now, as you have learned Android Studio. Let’s understand what files constitute different parts of an Android app.&lt;/p&gt;

&lt;h2 id=&quot;android-project-file-structure&quot;&gt;Android Project File Structure&lt;/h2&gt;

&lt;p&gt;I would recommend you to open the &lt;em&gt;Project&lt;/em&gt; view for understanding what responsibility each file/folder has.&lt;/p&gt;

&lt;noscript&gt;&lt;img src=&quot;https://source.unsplash.com/random/300x200?sig=14&quot; alt=&quot;Android Studio main window&quot; title=&quot;&quot; class=&quot;mx-auto&quot; /&gt;&lt;/noscript&gt;
&lt;p&gt;&lt;img data-src=&quot;https://source.unsplash.com/random/300x200?sig=14&quot; alt=&quot;Android Studio main window&quot; title=&quot;Android Studio main window&quot; class=&quot;mx-auto lazyload&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Under the root folder, there are sub-folders for different things.&lt;/p&gt;

&lt;p&gt;First, there is the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.gradle&lt;/code&gt; folder. It is the local cache for Gradle to speed up some build processes. You would have noticed by now that the first Gradle build takes time and subsequent builds are a bit faster - that’s because Gradle stores cache to make things faster on further builds.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.idea&lt;/code&gt; folder has all the local settings for your current environment. Since Android Studio is based on IntelliJ IDEA, it follows IDEA’s blueprints.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;build&lt;/code&gt; folder would have the assets you generate- like a signed APK or so.&lt;/p&gt;

&lt;p&gt;Then there comes a cluster of files, I will cover them together because they are all related to Gradle:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;The root-level &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;build.gradle&lt;/code&gt; file: It contains configurations that are used by the app you are making, and all the libraries included in the project too.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;settings.gradle&lt;/code&gt; contains references of the repositories in which Gradle should look for while importing a library. It also unites all the libraries and the app together.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gradle.properties&lt;/code&gt; defines settings that Gradle uses for the current project.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;local.properties&lt;/code&gt; file, as the name suggests, is for local environment settings.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/a/44861408/9819031&quot;&gt;Read this answer&lt;/a&gt; on StackOverflow to know in-depth about the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gradlew&lt;/code&gt; and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gradle.bat&lt;/code&gt; file.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s move to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app&lt;/code&gt; folder now. This is where the source code of our app lives.&lt;/p&gt;

&lt;noscript&gt;&lt;img src=&quot;https://source.unsplash.com/random/300x200?sig=15&quot; alt=&quot;Android Studio main window&quot; title=&quot;&quot; class=&quot;mx-auto&quot; /&gt;&lt;/noscript&gt;
&lt;p&gt;&lt;img data-src=&quot;https://source.unsplash.com/random/300x200?sig=15&quot; alt=&quot;Android Studio main window&quot; title=&quot;Android Studio main window&quot; class=&quot;mx-auto lazyload&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;libs&lt;/code&gt; folder here would contain any external libraries you would import to the project. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;build&lt;/code&gt; folder is the same, it contains generated files. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;proguard-rules.pro&lt;/code&gt; file has configurations for ProGuard - which allows obfuscating code for an app.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;src&lt;/code&gt; folder is the big deal. It contains all of your code files that define different pages(activities) in your app. All things related to the functioning of the app are contained inside this folder.&lt;/p&gt;

&lt;noscript&gt;&lt;img src=&quot;https://source.unsplash.com/random/300x200?sig=16&quot; alt=&quot;Android Studio main window&quot; title=&quot;&quot; class=&quot;mx-auto&quot; /&gt;&lt;/noscript&gt;
&lt;p&gt;&lt;img data-src=&quot;https://source.unsplash.com/random/300x200?sig=16&quot; alt=&quot;Android Studio main window&quot; title=&quot;Android Studio main window&quot; class=&quot;mx-auto lazyload&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;androidTest&lt;/code&gt; folder contains tests written to test the user interface of the app. For example, Tests that validate if a screen opens properly in different scenarios.&lt;/li&gt;
  &lt;li&gt;the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;test&lt;/code&gt; folder has test files to test general functions implemented in the app. For example, Tests that validate if a function that validates E-Mail formatting is working fine or not.&lt;/li&gt;
  &lt;li&gt;Finally, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; folder contains the actual files that make up the app.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We will know about testing in android apps in future articles :)&lt;/p&gt;

&lt;p&gt;Now, open the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; folder. Here comes the interesting part. Don’t worry if the above things went over your head, this section will be understood by most of you because it’s intuitive.&lt;/p&gt;

&lt;p&gt;Now, you will be able to see three elements:&lt;/p&gt;

&lt;noscript&gt;&lt;img src=&quot;https://source.unsplash.com/random/300x200?sig=17&quot; alt=&quot;Android Studio main window&quot; title=&quot;&quot; class=&quot;mx-auto&quot; /&gt;&lt;/noscript&gt;
&lt;p&gt;&lt;img data-src=&quot;https://source.unsplash.com/random/300x200?sig=17&quot; alt=&quot;Android Studio main window&quot; title=&quot;Android Studio main window&quot; class=&quot;mx-auto lazyload&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We will start with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AndroidManifest.xml&lt;/code&gt; file. Consider this scenario, someone gives you a book but in an ambiguous way, they just pass you the pages, and the book isn’t bound altogether. Then, the pages and the chapters won’t make any sense to you, right?&lt;/p&gt;

&lt;p&gt;This is the same with Android Operating System. Let’s consider you made an app with multiple screens. The Android system doesn’t know the screens that your app contains and it can misunderstand them to other screens implemented in other apps. Now how does it know what all screens are a part of your app?&lt;/p&gt;

&lt;p&gt;Here comes the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AndroidManifest.xml&lt;/code&gt; file into play. It is a structured file that lists all the activities that are a part of the app, and any other components that the app may contain, like implementations for background services that the app may utilize, the permissions that the app would use to give its full functionality or some other meta-data information.&lt;/p&gt;

&lt;p&gt;Now, I am sure it would be clear to you what &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AndroidManifest.xml&lt;/code&gt; file does. Now, hop into the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;java&lt;/code&gt; folder.&lt;/p&gt;

&lt;noscript&gt;&lt;img src=&quot;https://source.unsplash.com/random/300x200?sig=12&quot; alt=&quot;Android Studio main window&quot; title=&quot;&quot; class=&quot;mx-auto&quot; /&gt;&lt;/noscript&gt;
&lt;p&gt;&lt;img data-src=&quot;https://source.unsplash.com/random/300x200?sig=12&quot; alt=&quot;Android Studio main window&quot; title=&quot;Android Studio main window&quot; class=&quot;mx-auto lazyload&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It contains different packages with different files for anything you want to do. It can contain activity classes, utility classes for some functions that you want to reuse in the project again and again, for implementing data classes to store data, and basically anything that isn’t related to the user interface.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;xml&lt;/code&gt; folder is where all the UI elements should be placed.&lt;/p&gt;

&lt;noscript&gt;&lt;img src=&quot;https://source.unsplash.com/random/300x200?sig=13&quot; alt=&quot;Android Studio main window&quot; title=&quot;&quot; class=&quot;mx-auto&quot; /&gt;&lt;/noscript&gt;
&lt;p&gt;&lt;img data-src=&quot;https://source.unsplash.com/random/300x200?sig=13&quot; alt=&quot;Android Studio main window&quot; title=&quot;Android Studio main window&quot; class=&quot;mx-auto lazyload&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;drawable&lt;/code&gt; folder should contain vector graphics that can be shown on the screen.&lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;layout&lt;/code&gt; folder is the place where the screens are actually placed. It should contain the files that implement the user interface for different screens.&lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mipmap&lt;/code&gt; cluster of folders would contain non-scalable image assets. And if you are assuming that one has to define all the densities by themselves before importing them to Android Studio- then no, you are wrong 😂. Android Studio has an inbuilt feature that assists you to convert graphics to different densities.&lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;values&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;values-night&lt;/code&gt; contain constant values in kind of a key-value format. You can access these values from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;java&lt;/code&gt;/&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kotlin&lt;/code&gt; code at runtime by referencing the key. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;values&lt;/code&gt; folder is used by android when the app is using a light theme, and the other one is automatically picked up if you turn to dark mode.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;final-words&quot;&gt;FiNaL WoRdS&lt;/h2&gt;

&lt;p&gt;Okay, so this was it to know how a really basic Android project is structured. Now, you can go and have a look at various &lt;a href=&quot;https://github.com/topics/android&quot;&gt;open source android projects&lt;/a&gt; on GitHub. Try to remember what significance a file has in a project.&lt;/p&gt;

&lt;p&gt;You can also try to make projects in Android Studio using the starter templates and have a look into different things.&lt;/p&gt;

&lt;p&gt;I hope was able to explain to you how an Android project looks like. In future articles, we’ll get into further details by making simple apps and understanding the use of different things in an android app.&lt;/p&gt;

&lt;p&gt;Comment on this post if this was even a bit of help for you 🙌. It motivates me to keep writing and sharing useful things!&lt;/p&gt;

&lt;p&gt;Happy Coding :)&lt;/p&gt;</content><author><name>gouravkhunger</name></author><category term="android" /><summary type="html">A complete guide to understanding Android Studio basics and Android app structure.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://genicsblog.com/_next/image?url=https%3A%2F%2Fcdn.hashnode.com%2Fres%2Fhashnode%2Fimage%2Fupload%2Fv1632128417570%2FzaxOSlbso.png%3Fw%3D1600%26h%3D840%26fit%3Dcrop%26crop%3Dentropy%26auto%3Dcompress%2Cformat%26format%3Dwebp&amp;w=3840&amp;q=75" /><media:content medium="image" url="https://genicsblog.com/_next/image?url=https%3A%2F%2Fcdn.hashnode.com%2Fres%2Fhashnode%2Fimage%2Fupload%2Fv1632128417570%2FzaxOSlbso.png%3Fw%3D1600%26h%3D840%26fit%3Dcrop%26crop%3Dentropy%26auto%3Dcompress%2Cformat%26format%3Dwebp&amp;w=3840&amp;q=75" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Introducing JekyllEx - The easiest way to manage a Jekyll blog from an Android device!</title><link href="https://genicsblog.com/introducing-jekyllex-android-app" rel="alternate" type="text/html" title="Introducing JekyllEx - The easiest way to manage a Jekyll blog from an Android device!" /><published>2021-08-31T00:00:00+00:00</published><updated>2021-08-31T00:00:00+00:00</updated><id>https://genicsblog.com/introducing-jekyllex-android-app</id><content type="html" xml:base="https://genicsblog.com/introducing-jekyllex-android-app">&lt;h2 id=&quot;introducing-jekyllex---the-easiest-way-to-manage-a-jekyll-blog-from-an-android-device&quot;&gt;Introducing JekyllEx - The easiest way to manage a Jekyll blog from an Android device!&lt;/h2&gt;

&lt;p&gt;Hello, awesome people!&lt;/p&gt;

&lt;p&gt;Today I present to you my latest project - &lt;a href=&quot;https://jekyllex.xyz&quot;&gt;JekyllEx&lt;/a&gt;, which I have been working on for the &lt;a href=&quot;https://townhall.hashnode.com/auth0-hackathon&quot;&gt;Hashnode Auth0 August Hackathon&lt;/a&gt;!&lt;/p&gt;

&lt;h2 id=&quot;-detailed-background&quot;&gt;🎊 Detailed Background&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;TLDR&lt;/strong&gt;: I built JekyllEx because Jekyll(a static site generator) has a lot of potentials, but the learning curve for a non-tech-savvy person was high.&lt;/p&gt;

&lt;p&gt;To bridge the gap, I am presenting JekyllEx which can intuitively manage a Jekyll blog’s posts with a much simpler UI and effective editor- using which you don’t need to mess with code and commits for any article you write!&lt;/p&gt;

&lt;p&gt;A few months ago, I got to learn about &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;, which is a static site generator. In short:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Jekyll is a simple, blog-aware, static site generator perfect for personal, project, or organization sites. Think of it like a file-based CMS, without all the complexity. Jekyll takes your content, renders Markdown and Liquid templates, and spits out a complete, static website ready to be served by Apache, Nginx, or another web server.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This caught my attention in the first go as I am a blogging freak who has been &lt;a href=&quot;https://genicsblog.com/introductory-first-post&quot;&gt;testing different blogging solutions for a few years now&lt;/a&gt; 😆.&lt;/p&gt;

&lt;p&gt;I used Jekyll in many places, testing things locally and then finally making &lt;a href=&quot;https://samdisha.me&quot;&gt;my sister’s blog&lt;/a&gt; with it, and helped someone(can’t mention) to make a &lt;a href=&quot;https://60wordsofwisdom.xyz&quot;&gt;small blog&lt;/a&gt; for him.&lt;/p&gt;

&lt;p&gt;It was just the fact that after initial setup, all we need to do for a new post is write markdown and let Jekyll do the further work… And, since it builds a static site, we can host it for free on Github Pages!&lt;/p&gt;

&lt;p&gt;This seems a good deal for someone, who doesn’t want to pay much amount for hosting and themes (if we consider WordPress and alternatives), and just want a minimal site for the content they want to put up.&lt;/p&gt;

&lt;p&gt;So, I went on to make the blog for my sister. But here comes the tricky part. Jekyll is actually hard for non-techy people. For, at least they must understand basic coding principles and some web dev to be able to understand what goes on in their Jekyll theme and posts.&lt;/p&gt;

&lt;p&gt;This was the birth of &lt;strong&gt;JekyllEx&lt;/strong&gt;, a solution to a problem that isn’t solved because Jekyll hasn’t that vast of a community for it to have such solutions.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Jekyll is used by 0.1% of all the websites&lt;/strong&gt; whose content management system we know. This is 0.1% of all websites.&lt;/p&gt;

  &lt;p&gt;~ &lt;a href=&quot;https://w3techs.com/technologies/details/cm-jekyll&quot;&gt;w3techs.com&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I had the idea of making a blog manager app for Jekyll, partly because I hadn’t coded in a while because of my studies, and partly because my sister would eat my head if there’s any single typo in her blog post because I was the one who managed it 😆. I had to edit, preview, test, and commit for such small things which seemed tedious.&lt;/p&gt;

&lt;p&gt;I was just procrastinating making this cool project, but as soon as I heard about Auth0, and how easily they let integrating login functionality in an app, I was pretty sure I would be using it. And coincidently, Hashnode partnered with Auth0 to organize the august hackathon challenge and that provided the motivation to work on the project!&lt;/p&gt;

&lt;p&gt;JekyllEx wouldn’t be made such a short amount of time if Hashnode hadn’t partnered with Auth0 to present this hackathon. That’s because JekyllEx depends on Github API, and integration with GitHub is in turn provided by Auth0. JekyllEx, at its core, uses the GitHub API to manage jekyll repositories.&lt;/p&gt;

&lt;p&gt;To put things in a better structure, these were the points that lead me to make JekyllEx:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;My sister personally needed an intuitive manager app for her Jekyll blog, using which she can do things from her phone itself.&lt;/li&gt;
  &lt;li&gt;I wanted to get my hands dirty on some project as I hadn’t coded for a while&lt;/li&gt;
  &lt;li&gt;I also wanted to do something for this blog, as it had been inactive for some months because I couldn’t get the time to post anything 😅&lt;/li&gt;
  &lt;li&gt;Hashnode’s august hackathon in partnership with Auth0 provided the zeal required to start a new project!&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;-introducing-jekyllex&quot;&gt;🚀 Introducing JekyllEx&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.hashnode.com/res/hashnode/image/upload/v1630347657127/VGBAZJ7zN.png&quot; alt=&quot;round_logo.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;JekyllEx is the new way to write articles for a Jekyll blog. It is an android app using which you can create/edit/delete posts for the blog hosted at Github Pages.&lt;/p&gt;

&lt;p&gt;Download and install the &lt;a href=&quot;https://github.com/jekyllex/jekyllex-android/releases/latest&quot;&gt;latest release&lt;/a&gt; of the app to start relishing the power of blogging from your mobile!&lt;/p&gt;

&lt;p&gt;Check out the demo video to know how to use JekyllEx!&lt;/p&gt;

&lt;div class=&quot; mb-6 aspect-video&quot;&gt;
    &lt;iframe src=&quot;https://www.youtube.com/embed/U92BmvFzmCc&quot; class=&quot;w-full h-full rounded-xl&quot; allowfullscreen=&quot;&quot;&gt;
    &lt;/iframe&gt;
&lt;/div&gt;

&lt;h3 id=&quot;-some-handy-links&quot;&gt;🔗 Some Handy Links:&lt;/h3&gt;

&lt;p&gt;Before the App tour, let me give you the links to different resources that revolve around JekyllEx and will be referred to, later in the post.&lt;/p&gt;

&lt;h4 id=&quot;github-repositories&quot;&gt;GitHub Repositories&lt;/h4&gt;

&lt;p&gt;Go smash a star on all of ‘em 😆. If not all, do star the app’s repository 😀&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;GitHub Organisation: https://github.com/jekyllex&lt;/li&gt;
  &lt;li&gt;JekyllEx Android App: https://github.com/jekyllex/jekyllex-android&lt;/li&gt;
  &lt;li&gt;Proxy API: https://github.com/jekyllex/jekyllex-api&lt;/li&gt;
  &lt;li&gt;Demo blog: https://github.com/gouravkhunger/demo-jekyll-blog&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;others&quot;&gt;Others&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Website: https://jekyllex.xyz&lt;/li&gt;
  &lt;li&gt;Documentation: https://docs.jekyllex.xyz (under construction)&lt;/li&gt;
  &lt;li&gt;API: https://api.jekyllex.xyz&lt;/li&gt;
  &lt;li&gt;Demo blog used for testing Jekyll app: https://demo.jekyllex.xyz&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;-app-tour&quot;&gt;🔎 App Tour&lt;/h2&gt;

&lt;p&gt;This section showcases the UI of the JekyllEx app.&lt;/p&gt;

&lt;h3 id=&quot;authentication&quot;&gt;Authentication&lt;/h3&gt;

&lt;p&gt;This is the auth page where the user must connect his GitHub account with JekyllEx to authorize the App to manage the blog repository.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.hashnode.com/res/hashnode/image/upload/v1630351766117/Q5GSw4BdA.png&quot; alt=&quot;auth-page.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;home-page&quot;&gt;Home Page&lt;/h3&gt;

&lt;p&gt;The home page of the app lists all your repositories on the home page, so you can choose the repository that has the Jekyll blog in it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.hashnode.com/res/hashnode/image/upload/v1630351781213/6x7woWiw8.png&quot; alt=&quot;home-page.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;posts-page&quot;&gt;Posts Page&lt;/h3&gt;

&lt;p&gt;Clicking on any repository on the Home Page takes you to the Posts page. If the selected repository is a Jekyll blog, then the posts of the blog will be loaded, else an error will be shown that the repository isn’t a Jekyll project.&lt;/p&gt;

&lt;p&gt;Implementing the logic of loading posts from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_posts&lt;/code&gt; folder in the repository was a bit tricky, it took me around 1-2 hours to come up with a solution. More on this later in the post!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.hashnode.com/res/hashnode/image/upload/v1630355745666/OuiVtnSgk.png&quot; alt=&quot;posts-page.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;new-post&quot;&gt;New Post&lt;/h3&gt;

&lt;p&gt;From the posts page, you can create a new post by pressing the icon on the top right representing “New Post”.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.hashnode.com/res/hashnode/image/upload/v1630355869755/bv7Unn3vJ.png&quot; alt=&quot;new-post.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;the-editor&quot;&gt;The Editor&lt;/h3&gt;

&lt;p&gt;This is the core page of the app where a user can edit and preview the markdown post being rendered live, and also set post metadata. Meta Data in a Jekyll post is a collection of some variables that define specifics about a post like its &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Title&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Description&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Summary&lt;/code&gt;…&lt;/p&gt;

&lt;p&gt;These fields are then used by the installed Jekyll theme to present the posts in the rendered HTML accordingly…&lt;/p&gt;

&lt;p&gt;The Editor has two tabs- the &lt;strong&gt;EDIT FILE&lt;/strong&gt; tab and the &lt;strong&gt;PREVIEW CHANGES&lt;/strong&gt; tab. As the text is entered in the editing pane, it gets auto rendered on the preview pane live.&lt;/p&gt;

&lt;p&gt;Another feature of the editor is synchronized scrolling, that is, as soon as one scrolls down in the editing pane, the preview pane scrolls by the same unit so that the editor and the preview show pretty much the same thing and provide a seamless experience of editing.&lt;/p&gt;

&lt;p&gt;This is really helpful if the post file is large and the sections that are to be edited are far away, in such scenarios, synchronized scrolling helps a lot.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.hashnode.com/res/hashnode/image/upload/v1630355928541/fYHl0Gzkr.png&quot; alt=&quot;editing-page.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;profile-page&quot;&gt;Profile Page&lt;/h3&gt;

&lt;p&gt;The app has a cool profile page that shows user information that it receives from the GitHub API. Once the data is fetched, it is cached and saved to a local room database. But the user can force refresh the profile from the menu too.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.hashnode.com/res/hashnode/image/upload/v1630355109995/TcAVSCdzsQ.png&quot; alt=&quot;profile-page.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;some-other-sections&quot;&gt;Some other sections&lt;/h3&gt;

&lt;p&gt;These are some of the things that were left in the above images, so included aside:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.hashnode.com/res/hashnode/image/upload/v1630356234366/bxtpJ84ko.png&quot; alt=&quot;other.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;-technical-details&quot;&gt;🛠 Technical Details&lt;/h2&gt;

&lt;p&gt;The codebase of the app is based on the MVVM pattern. Here’s a list of tools/libraries/components JekyllEx uses:&lt;/p&gt;

&lt;h3 id=&quot;frontend&quot;&gt;Frontend&lt;/h3&gt;

&lt;h4 id=&quot;platform&quot;&gt;Platform&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Android&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;languages-used&quot;&gt;Languages Used&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Kotlin&lt;/li&gt;
  &lt;li&gt;XML&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;libraries&quot;&gt;Libraries&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Android Architecture Components&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://auth0.com/&quot;&gt;Auth0&lt;/a&gt; : For user authentication&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/square/retrofit&quot;&gt;Retrofit&lt;/a&gt; : For network requests&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.android.com/training/data-storage/room&quot;&gt;Room&lt;/a&gt; : For local database and caching user profile&lt;/li&gt;
  &lt;li&gt;Kotlin extensions and Coroutines for Room&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/noties/Markwon&quot;&gt;Markwon&lt;/a&gt; : Markdown rendering&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/javiersantos/AppUpdater&quot;&gt;App Updater&lt;/a&gt; : To check for updates from GitHub Releases&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/bumptech/glide&quot;&gt;Glide&lt;/a&gt; : For image loading.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://firebase.google.com/&quot;&gt;Firebase&lt;/a&gt; : For push notifications, analytics and crashlytics.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I used &lt;a href=&quot;https://plugins.jetbrains.com/plugin/15057-ktlint-unofficial-&quot;&gt;the unofficial &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ktlint&lt;/code&gt; plugin&lt;/a&gt; for linting the code files locally, and used &lt;a href=&quot;https://github.com/github/super-linter&quot;&gt;GitHub super linter&lt;/a&gt; as a second lint test for the code files. The super linter also lints XML files.&lt;/p&gt;

&lt;h4 id=&quot;mad-score&quot;&gt;M.A.D. Score&lt;/h4&gt;

&lt;p&gt;JekyllEx has a &lt;a href=&quot;https://goo.gle/MADscore&quot;&gt;M.A.D.&lt;/a&gt; score of MAD legend, the Greatest Of All Time of Android development.&lt;/p&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://madscorecard.withgoogle.com/scorecards/878880162/&quot;&gt;score card&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.hashnode.com/res/hashnode/image/upload/v1630400803535/RMu_MMtyW.png&quot; alt=&quot;summary.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;backend&quot;&gt;Backend&lt;/h3&gt;

&lt;p&gt;Language: &lt;strong&gt;JavaScript&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;JekyllEx uses a proxy API to securely retrieve user information from Auth0 Management API &lt;a href=&quot;https://auth0.com/docs/connections/calling-an-external-idp-api#from-the-frontend&quot;&gt;as recommended in the Auth0 docs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The API is built using express and is hosted on Heroku.&lt;/p&gt;

&lt;h3 id=&quot;️-license&quot;&gt;🛡️ License&lt;/h3&gt;

&lt;p&gt;This project is &lt;a href=&quot;https://github.com/jekyllex/jekyllex-android/blob/main/LICENSE&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MIT&lt;/code&gt;&lt;/a&gt; licensed.&lt;/p&gt;

&lt;h2 id=&quot;-development-journey&quot;&gt;👨🏻‍💻 Development Journey&lt;/h2&gt;

&lt;p&gt;Developing JekyllEx was a lot of fun because it involved learning new things!&lt;/p&gt;

&lt;p&gt;I completed most of the UI in 3 days, then took some time to figure out the Proxy API thing. It was completely new for me so I had to struggle a bit for 2 days to understand how Express APIs work.&lt;/p&gt;

&lt;p&gt;Then I made the different features by integrating GitHub API. Authorization was effortlessly handled by Auth0! I used the Retrofit library to do all the networking stuff like API calls, handling responses, etc.&lt;/p&gt;

&lt;p&gt;I quickly made a &lt;a href=&quot;https://demo.jekyllex.xyz&quot;&gt;demo blog&lt;/a&gt; with a minimal theme and tested features of JekyllEx once it was done.&lt;/p&gt;

&lt;h2 id=&quot;-challenges&quot;&gt;😎 Challenges&lt;/h2&gt;

&lt;h3 id=&quot;making-the-proxy-api&quot;&gt;Making the Proxy API&lt;/h3&gt;

&lt;p&gt;The biggest challenge I faced during development was building the proxy API, which was needed to securely retrieve user credentials.&lt;/p&gt;

&lt;p&gt;I had to look through a lot of articles to understand how Node.js works and how would I get my API to work.&lt;/p&gt;

&lt;p&gt;With considerable theoretical help from @&lt;a href=&quot;@SamJakob&quot;&gt;SamJakob&lt;/a&gt;, I got clarity and could proceed to start developing the API.&lt;/p&gt;

&lt;p&gt;To get user profiles from Auth0 Management API, we first get an access token that can be used to retrieve the profile.&lt;/p&gt;

&lt;p&gt;I use this snippet to refresh the Auth0 access token periodically:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Function to renew Auth0 Management API access token&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getAccessToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// time after which token must be refreshed, It will be updated later&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;refreshAfter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// required parameter to pass to Auth0 Management API OAuth&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;client_id&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;CLIENT_ID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;client_secret&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;CLIENT_SECRET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;audience&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;AUTH0_AUDIENCE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;grant_type&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;GRANT_TYPE&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// axios request to get the access token&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;axios&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`https://&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;AUTH0_DOMAIN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/oauth/token`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// Overwrite Axios' automatically set Content-Type&lt;/span&gt;
      &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Content-Type&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;application/json&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// get the access token&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;accessToken&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;access_token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// token must refresh every 10 minutes before the expiration time&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;refreshAfter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;expires_in&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;600&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// refresh the token&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getAccessToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;refreshAfter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;accessToken&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// execute the function for the first time&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;getAccessToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This refreshes the Auth0 Management API access token 10 minutes before it expires. This token can be used to query the API to get details of a specific user.&lt;/p&gt;

&lt;h3 id=&quot;getting-files-from-the-_posts-folder&quot;&gt;Getting files from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_posts&lt;/code&gt; folder&lt;/h3&gt;

&lt;p&gt;It feels good to give yourself a pat on the shoulders when you do something good, and that also boosts your motivation to strive and do better than ever. I felt this when making the logic for retrieving all the files under the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_post&lt;/code&gt; folder(Jekyll blogs need a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_post&lt;/code&gt; folder with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;md&lt;/code&gt; files)&lt;/p&gt;

&lt;p&gt;When we query for items at a particular path in a repository, the GitHub API returns a list of items present there.&lt;/p&gt;

&lt;p&gt;So it seems simple that the files will be there in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_posts&lt;/code&gt; folder and we can query the content present there from the API and show the posts to the user.&lt;/p&gt;

&lt;p&gt;But this is not the case. The thing is, Jekyll looks for markdown files in the _posts folder on nested folders too. That means if someone has a file at the following path:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;_posts/android/2021-08-29-introduction-to-android.md
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;that will also be considered a valid post, even though it is in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;android&lt;/code&gt; subdirectory. So to solve this problem, we could query the GitHub API recursively, as we get the path of a folder when it is returned from the API.&lt;/p&gt;

&lt;p&gt;Here’s a snippet of how I am achieving this:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Function to get the content of the repository at a specific path inside it.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getContentFromPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;shouldPost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Boolean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;repoName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;accessToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;RepoContentItemModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;postsArray&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arrayListOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;RepoContentItemModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;()&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;runBlocking&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;repository&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;getRepoContent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;repoName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;accessToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isSuccessful&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;forEach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;s&quot;&gt;&quot;file&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;postsArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;s&quot;&gt;&quot;dir&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;nextLevel&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getContentFromPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;repoName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;accessToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;postsArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nextLevel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shouldPost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;posts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;postValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;postsArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;hasPosts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;postValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;postsArray&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;What this code does is, it takes some parameters such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;repoName&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;path&lt;/code&gt; to query for the content at the path in the provided repository. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;shouldPost&lt;/code&gt; variable dictates whether all the folders have been checked or not. Once all the folders have been queried, then it returns the array of posts, else it keeps on querying for folders sequentially- one level at a time.&lt;/p&gt;

&lt;p&gt;Notice &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;runBlocking&lt;/code&gt;, it is used to carry out the tasks defined in the block, on the main thread, because if the folders are queried from the coroutines(that carry out code asynchronously), then there can be errors when the posts are returned by GitHub API, consider this case:&lt;/p&gt;

&lt;p&gt;There are two folders- both are queried from separate threads, the problem here is, suppose the API didn’t return content for the first folder but returned content for the second folder faster than the first one, now since there are only 2 folders, the function would return the posts array as all folders have been marked as queried…&lt;/p&gt;

&lt;p&gt;And if by chance the API returns content for the second folder, this could lead to a crash, as the posts folder has already been returned. Also, if not a crash, this could lead to missing posts.&lt;/p&gt;

&lt;h3 id=&quot;synchronizing-editor-with-the-preview-tab&quot;&gt;Synchronizing Editor With the Preview Tab&lt;/h3&gt;

&lt;p&gt;The idea of synchronizing came to me when I once edited a markdown file in visual studio code, there was a markdown plugin that actually scrolled the preview by the same distance as the editing screen would.&lt;/p&gt;

&lt;p&gt;So I thought of implementing it in JekyllEx too, as that would be a really handy feature.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MutableLiveData&lt;/code&gt;, when used in a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ViewModel&lt;/code&gt; easily, allows emitting data that can be observed from Activities/Fragments. I used it to store the scroll distance as soon as the user scrolls inside the Editing tab, and it was observed by the Preview Fragment and was configured to set the scroll of the preview the same.&lt;/p&gt;

&lt;h4 id=&quot;editorviewmodelkt&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EditorViewModel.kt&lt;/code&gt;&lt;/h4&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// other stuff...&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Observable live data variables.&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;scrollDist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MutableLiveData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;lazy&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MutableLiveData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// other variables&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Function to set the Scroll View scroll distance.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setScrollDist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newDist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;scrollDist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;postValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newDist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// other stuff...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;editingfragmentkt&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EditingFragment.kt&lt;/code&gt;&lt;/h4&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// other stuff...&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Synchronize scroll distance with the preview tab.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;editorBinding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;editorScrollView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setOnScrollChangeListener&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scrollY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;viewModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setScrollDist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scrollY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// other stuff...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;previewfragmentkt&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PreviewFragment.kt&lt;/code&gt;&lt;/h4&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// other stuff...&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Observe the scroll dist of the editor area and scroll to that distance.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;viewModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scrollDist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;observe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;viewLifecycleOwner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;previewBinding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;previewScrollView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;smoothScrollTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// other stuff...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The same logic was used for text, as soon as text would be edited, it will be observed by the Preview Fragment and set the rendered markdown.&lt;/p&gt;

&lt;h2 id=&quot;-roadmap&quot;&gt;🔥 Roadmap&lt;/h2&gt;

&lt;p&gt;JekyllEx solves the major problem of managing posts. But there exists another problem, one can manage their blog from JekyllEx, but how could they make the Jekyll blog in the first place?&lt;/p&gt;

&lt;p&gt;Well, this is a major feature and it could bring a great change in how Jekyll Blogs are made, transforming from the traditional coding style, migrating to mobile devices. Then everyone could relish the power of Jekyll. Still, in the end, Jekyll remains only for those who don’t wish to have big features on their site and want to keep their hosting bills low, but still want the flexibility to be able to change every single bit of their blog.&lt;/p&gt;

&lt;p&gt;On a side note: For those who want to have an awesome newsletter, custom CSS and complete ownership of their blog for free, and still don’t want to mess up with code, Hashnode is a really great fit for them! &lt;a href=&quot;https://hashnode.com/@gouravkhunger/joinme&quot;&gt;Go sign up now&lt;/a&gt; and start blogging in minutes.&lt;/p&gt;

&lt;p&gt;Here’s a list of features I am planning to add to JekyllEx in the future:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Add functionality to make a blog using open-source Jekyll Themes directly from the app.&lt;/li&gt;
  &lt;li&gt;Add feature to edit pages too.&lt;/li&gt;
  &lt;li&gt;Add the “Continue where you left off” feature.&lt;/li&gt;
  &lt;li&gt;Add syntax highlighting to the markdown editor.&lt;/li&gt;
  &lt;li&gt;Improve the Meta Data editor to a more intuitive chip-based editor rather than a text box.&lt;/li&gt;
  &lt;li&gt;Allow editing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config.yml&lt;/code&gt; file from the App.&lt;/li&gt;
  &lt;li&gt;Save deleted posts to local DB to act as a restore point if deleted in error.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;If possible&lt;/strong&gt;, make a section to share your article with other JekyllEx users, like a community sort of thing.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;-real-usage&quot;&gt;💡 Real Usage&lt;/h2&gt;

&lt;p&gt;JekyllEx is already being used to manage:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://samdisha.me&quot;&gt;The personal blog of my sister&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://60wordsofwisdom.xyz&quot;&gt;60 w.o.w blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you use JekyllEx &lt;s&gt;and want to get some backlinks and referral&lt;/s&gt;, you can get listed here by comment your experience with using JekyllEx and providing a link to your blog!&lt;/p&gt;

&lt;h2 id=&quot;-final-words&quot;&gt;😊 Final Words&lt;/h2&gt;

&lt;p&gt;On an ending note, I would say making JekyllEx for this hackathon was extremely fun. I couldn’t have put myself to learn more new things if I would have procrastinated more. I also made really good new friends on the hashnode server.&lt;/p&gt;

&lt;p&gt;I would really appreciate it if you could take a moment and comment on your views on my project! Also, react to the post to spread some love :)&lt;/p&gt;

&lt;p&gt;All kinds of feedbacks are welcome 😄&lt;/p&gt;

&lt;h2 id=&quot;-connect-with-me&quot;&gt;🌏 Connect with me!&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Hashnode: &lt;a href=&quot;https://hashnode.com/@gouravkhunger&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@gourav_khunger&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;StackOverflow: &lt;a href=&quot;https://stackoverflow.com/users/9819031&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gourav&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Twitter: &lt;a href=&quot;https://twitter.com/gourav_khunger&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@gourav_khunger&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Instagram: &lt;a href=&quot;https://instagram.com/&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@_gourav.khunger_&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Youtube: &lt;a href=&quot;https://www.youtube.com/channel/UCkv-J_D8jK2N02nBcyM92mQ&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gourav Khunger&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Discord: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gourav#2215&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>gouravkhunger</name></author><category term="android" /><category term="android" /><category term="jekyll" /><category term="open-source" /><summary type="html">A project I made for the Hashnode x Auth0 August Hackathon.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://genicsblog.com/_next/image?url=https%3A%2F%2Fcdn.hashnode.com%2Fres%2Fhashnode%2Fimage%2Fupload%2Fv1630321300344%2FJIzd0LhK2.png%3Fw%3D1600%26h%3D840%26fit%3Dcrop%26crop%3Dentropy%26auto%3Dcompress%2Cformat%26format%3Dwebp&amp;w=3840&amp;q=75" /><media:content medium="image" url="https://genicsblog.com/_next/image?url=https%3A%2F%2Fcdn.hashnode.com%2Fres%2Fhashnode%2Fimage%2Fupload%2Fv1630321300344%2FJIzd0LhK2.png%3Fw%3D1600%26h%3D840%26fit%3Dcrop%26crop%3Dentropy%26auto%3Dcompress%2Cformat%26format%3Dwebp&amp;w=3840&amp;q=75" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>